# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VI4aUkLyZh-K24F3Ql8iN_iKMGL1q5Nu

# Importing Libraries
"""

import cv2
import pandas as pd
import numpy as np
import random
from google.colab.patches import cv2_imshow

"""# Implementing K-Mean Algorithm"""

class K_Means:
    def __init__(self, k, data):
        self.k = k
        self.df = data

    def distance(self, x1, x2):
        summation = np.sum((x1 - x2) ** 2)
        return np.sqrt(summation)
    
    def closest_centroid(self, node):
        distances = np.array([self.distance(node, i) for i in self.centroids])
        min_index = np.argmin(distances)
        return min_index
    
    def make_random_cetroids(self, k):
        random_numbers = random.sample(range(len(self.df.index)), k)
        centroids = np.array([self.df[['r', 'g', 'b']].values[i] for i in random_numbers])
        return centroids
        
    def calculate_new_centroids(self):
        cluster_avg = self.df.groupby('new-cluster').mean().reset_index()
        new_centroids = list(cluster_avg[['r', 'g', 'b']].values)
        empty_clusters = self.k - len(new_centroids)
        random_centroids = list(self.make_random_cetroids(empty_clusters))
        new_centroids = new_centroids + random_centroids
        new_centroids = np.array(new_centroids)
        return new_centroids
    
    def new_iterate(self):
        self.centroids = self.calculate_new_centroids()
        print('new centroids:\n', self.centroids)
        self.df['new-cluster'] = [self.closest_centroid(i[:3]) for i in self.df[['r', 'g', 'b']].values]
        
    def cluster(self):
        self.centroids = self.make_random_cetroids(self.k)
        print('Centroids:\n', self.centroids)
        self.df['pre-cluster'] = 0
        self.df['new-cluster'] = [self.closest_centroid(i) for i in self.df[['r', 'g', 'b']].values]
        iterate = True
        while iterate:
            self.df['pre-cluster'] = self.df['new-cluster']
            self.new_iterate()
            iterate = not self.df['new-cluster'].equals(self.df['pre-cluster'])
        return self.centroids

"""# Loading Image & Printing Image Size"""

img = cv2.imread('pirooz.jpg')
print(img.shape)
cv2_imshow(img)

"""# Converting Image To Dataframe For K-Mean Algorithm"""

df = pd.DataFrame(img.reshape(-1, 3), columns = ['r', 'g', 'b'])
df

"""# Clustering Image Color By K-Mean"""

k_mean = K_Means(16, df)
centroids = k_mean.cluster()
df

"""# Converting Result Dataframe To Image By Centroids & Reshaping Result"""

reduced_img = []
for i in df.values:
  reduced_img.append(centroids[i[4]])
reduced_img = np.array(reduced_img)
reduced_img = reduced_img.reshape(128, 128, 3)
cv2_imshow(reduced_img)

"""# Saving Image"""

cv2.imwrite('Reduced-Image.jpg', reduced_img)